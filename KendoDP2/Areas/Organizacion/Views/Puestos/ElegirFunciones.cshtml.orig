<<<<<<< HEAD
﻿
@using Kendo.Mvc.UI
@using KendoDP2.Areas.Evaluacion360.Models
@using KendoDP2.Areas.Organizacion.Models
@model KendoDP2.Areas.Organizacion.Models.Funcion
@{
    ViewBag.Title = "Funciones";
    Layout = "~/Views/Shared/_Layout.cshtml";
    IList<KendoDP2.Areas.Organizacion.Models.PuestoDTO> puestos = ViewBag.puestos;
    IList<KendoDP2.Areas.Organizacion.Models.FuncionDTO> funciones = ViewBag.funciones;
    
}

@{Html.RenderPartial("Titulo", new KendoDP2.Models.Helpers.PageTitle("Elegir evaluados", "Elija los colaboradores evaluados en este proceso"));}

<div class="portlet box green">
    <div class="portlet-title">
        <h4><i class="icon-reorder"></i>Procesos de evaluación</h4>
        <div class="tools">
            <a href="javascript:;" class="collapse"></a>
        </div>
    </div>
    <div class="portlet-body">
        <div class="row-fluid">
            
            <div class="span10">
                @(Html.Kendo().Grid<KendoDP2.Areas.Organizacion.Models.FuncionDTO>()
                .Name("Funciones    Grid")
                .Columns(columns =>
                    {
                        columns.Bound(p => p.Nombre);
                        columns.Bound(p => p.Peso);
                        
                        columns.Command(command =>
                        {
                            command.Destroy().Text("Eliminar");
                        }).Width(200);
                    }
                )
                .ToolBar(toolbar => 
                    {
                        toolbar.Custom().Text("Iniciar proceso").Action("IniciarProcesoEvaluacion", "ProcesoEvaluacion"); 
                        toolbar.Custom().Text("Cerrar Proceso").Action("CerrarProcesoEvaluacion", "ProcesoEvaluacion");
                        //toolbar.Template(@<text><a class='k-button'>Test toolbar</a></text>);
                            //"<a class='k-button' href='" + Url.Action("ElegirEvaluados", "ProcesoEvaluacion") + ">Test toolbar</a>");
                    }
                        )
                        .Editable(
                            e => e.DisplayDeleteConfirmation("¿Realmente desdea eliminar este registro?")
                        )
                        .Pageable(paper => paper.Refresh(true))
                        .Filterable()
                        .Sortable()
                        .Scrollable(w => w.Height(330))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(20)
                            .Model(model => { model.Id(p => p.ID); })
                            .Read(read => read.Action("ReadEvaluados", "ProcesoEvaluacion", new { procesoID = Model.ID }))
                            .Destroy(update => update.Action("DestroyEvaluados", "ProcesoEvaluacion"))
                            .Events(e => e.RequestEnd("requestEnd"))
                        )
                        )
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function(){
        cargaTiles();
    });
    function requestEnd(e){
        cargaTiles();
    }

    function cargaTilesAreas(){
        $.ajax({
            url: '@Url.Action("GetAreas", "ProcesoEvaluacion", new { Area = "Evaluacion360" })',
            dataType: 'JSON',
            type: 'GET',
            data: { procesoID : @Model.ID },
            success: function(response){
                $("#event_box_areas").html('');
                for(var i = 0; i < response.data.length; i++){
                    agregaTileDeArea(response.data[i].AreaDTO.ID, response.data[i].AreaDTO.Nombre);
                }
            }
        });
    }
    
    function cargaTilesColaboradores(){
        $.ajax({
            url: '@Url.Action("GetEvaluadosDirectos", "ProcesoEvaluacion", new { Area = "Evaluacion360" })',
            dataType: 'JSON',
            type: 'GET',
            data: { procesoID : @Model.ID },
            success: function(response){
                $("#event_box_colaboradores").html('');
                console.log('asdf');
                for(var i = 0; i < response.data.length; i++){
                    agregaTileDeColaborador(response.data[i].ColaboradorDTO.ID, response.data[i].ColaboradorDTO.NombreCompleto);
                }
            }
        });
    }

    function cargaTiles(){
        cargaTilesAreas();
        cargaTilesColaboradores();
    }
    function agregaTileDeArea(areaID, areaNombre){
        var newDiv = '<a href="javascript:removeArea(' + areaID + ');" class="label external-event">' + areaNombre + '<i class="icon-remove"></i></a>'; 
        $("#event_box_areas").append(newDiv);
    }
    function agregaTileDeColaborador(colaboradorID, nombreCompleto){
        var newDiv = '<a href="javascript: (' + colaboradorID + ');" class="label external-event">' + nombreCompleto + '<i class="icon-remove"></i></a>'; 
        $("#event_box_colaboradores").append(newDiv);
    }

    function removeColaborador(colaboradorID){
        $.ajax({
            url: '@Url.Action("DestroyEvaluadoDirecto", "ProcesoEvaluacion", new { Area = "Evaluacion360" })',
            dataType: 'JSON',
            type: 'POST',
            data: { procesoID : @Model.ID, colaboradorID : colaboradorID },
            success: function(response){
                cargaTiles();
                $("#ColaboradoresDeProcesoEvaluacionGrid").data('kendoGrid').dataSource.read();
            }
        });
    }
    function removeArea(areaID){
        $.ajax({
            url: '@Url.Action("DestroyArea", "ProcesoEvaluacion", new { Area = "Evaluacion360" })',
            dataType: 'JSON',
            type: 'POST',
            data: { procesoID : @Model.ID, areaID : areaID },
            success: function(response){
                cargaTiles();
                $("#ColaboradoresDeProcesoEvaluacionGrid").data('kendoGrid').dataSource.read();
            }
        });
    }

    function comboAreasSelection(e) {
        var comboAreas = $('#ComboAreas').data('kendoComboBox');
        if (comboAreas.selectedIndex == -1)
            return;
        var areaID = comboAreas.dataItem(comboAreas.selectedIndex).ID;
        var areaNombre = comboAreas.dataItem(comboAreas.selectedIndex).Nombre;
        console.log("area seleccionada:" + areaID);

        $.ajax({
            url: '@Url.Action("AddEvaluadosAreas", "ProcesoEvaluacion", new { Area = "Evaluacion360" })',
            dataType: 'JSON',
            type: 'POST',
            data: {procesoID: @Model.ID, areaID: areaID},
            success: function(data){
                if(data.success){
                    cargaTilesAreas();
                    $("#ColaboradoresDeProcesoEvaluacionGrid").data('kendoGrid').dataSource.read();
                }
                else {
                }
            },
            error: function(){
                alert("Hubo un error en la operación");
            }
        });
    };

    function comboColaboradoresSelection(e) {
        var comboColaboradores = $("#ComboColaboradores").data('kendoComboBox');
        if (comboColaboradores.selectedIndex == -1)
            return;
        var colaboradorID = comboColaboradores.dataItem(comboColaboradores.selectedIndex).ID;
        var colaboradorNombre = comboColaboradores.dataItem(comboColaboradores.selectedIndex).NombreCompleto;
        $.ajax({
            url: '@Url.Action("AddEvaluadosColaborador", "ProcesoEvaluacion", new { Area = "Evaluacion360" })',
            dataType: 'JSON',
            type: 'POST',
            data: {procesoID: @Model.ID, colaboradorID: colaboradorID},
            success: function(data){
                if(data.success){
                    cargaTilesColaboradores();
                    $("#ColaboradoresDeProcesoEvaluacionGrid").data('kendoGrid').dataSource.read();
                }
                else
                    alert("El colaborador seleccionado ya se encuentra en la lista de evaluados");
            },
            error: function(){        
                alert("Hubo un error en la operación");
            }
        });
    }
</script>
=======
﻿@using Kendo.Mvc.UI
@using KendoDP2.Areas.Evaluacion360.Models
@using KendoDP2.Areas.Organizacion.Models

@{
    ViewBag.Title = "Puestos";
    Layout = "~/Views/Shared/_Layout.cshtml";
    IList<PuestoDTO> puestos = ViewBag.puestos;
    IList<CompetenciaDTO> competencias = ViewBag.competencias;
    IList<NivelCapacidadDTO> niveles = ViewBag.niveles;
}

@{Html.RenderPartial("Titulo", new KendoDP2.Models.Helpers.PageTitle("Funciones de puestos de trabajo", "Administre las funciones de los puestos de trabajo"));}
<div class="portlet box green">
    <div class="portlet-title">
        <h4><i class="icon-reorder"></i>Puestos de trabajo</h4>
        <div class="tools">
	        <a href="javascript:;" class="collapse"></a>
        </div>
	</div>
    
    <div class="portlet-body">
        <div class="row-fluid">
            <div class="span3 responsive">
                @(Html.Kendo().ComboBox()
                    .Name("ComboPuestos")
                    .Placeholder("Seleccione el puesto...")
                    .DataTextField("Nombre")
                    .DataValueField("ID")
                    .Filter("contains")
                    .BindTo(puestos)
                    .Suggest(true)
                    .HtmlAttributes(new { style = "width:100%" })
                    .Events(e => e.Close("comboPuestosSelection"))
                    .SelectedIndex(0)
                )

@*                @{var comboPuesto = Html.Kendo().ComboBox()
                    .Name("ComboPuestos")
                    .Placeholder("Seleccione el puesto...")
                    .DataTextField("Nombre")
                    .DataValueField("ID")
                    .Filter("contains")
                    .BindTo(puestos)
                    .Suggest(true)
                    .HtmlAttributes(new { style = "width:100%" })
                    .Events(e => e.Close("comboPuestosSelection"))
                    .SelectedIndex(0);

                  comboPuesto.Render();
                }*@
            </div>
        </div>
        <div class="row-fluid information-container">
            @foreach(var puesto in puestos){
                <div id="container-@(puesto.ID)" class="hidden">
                    <div class="tabbable tabbable-custom tabs-left">
                    <!-- Only required for left/right tabs -->
                    <ul class="nav nav-tabs tabs-left">
                        <li class="active"><a href="#tab_competencias_@(puesto.ID)" data-toggle="tab">Competencias</a></li>
                        <li class=""><a href="#tab_tipo_evaluadores_@(puesto.ID)" data-toggle="tab">Evaluadores</a></li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="tab_competencias_@(puesto.ID)">
                            @(Html.Kendo().Grid<CompetenciaXPuestoDTO>()
                                .Name("CompetenciasGrid-" + @puesto.ID)
                                .Columns(columns =>
                                    {
                                        columns.ForeignKey(p => p.CompetenciaID, new SelectList(competencias, "ID", "Nombre"));
                                        columns.ForeignKey(p => p.NivelID, new SelectList(niveles, "ID", "Nivel"));
                                        columns.Bound(p => p.Peso).ClientFooterTemplate("<strong>Suma:</strong> #=sum#");
                                        columns.Command(command => { command.Destroy().Text("Eliminar"); }).Width(200);
                                    }
                                )
                                .ToolBar(toolbar => { toolbar.Create().Text("Registrar"); toolbar.Save().SaveText("Guardar cambios").CancelText("Cancelar cambios"); })
                                .Editable(editable => editable
                                    .Mode(GridEditMode.InCell)
                                    .DisplayDeleteConfirmation("Recuerde que debe guardar los cambios para hacer efectiva la eliminación.")
                                    .Window(w => w.Title("Ingrese los datos"))
                                )
                                .Pageable(e => e.Refresh(true))
                                .Filterable()
                                .Sortable()
                                .Scrollable(w => w.Height(330))
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(20)
                                    .Aggregates(a =>
                                    {
                                        a.Add(p => p.Peso).Sum();
                                    })
                                    .Model(model =>
                                    {
                                        model.Id(p => p.ID);
                                    })
                                    .Create(create => create.Action("Create_competenciaAUnPuesto", "PuestosEvaluacion", new { elPuestoID = puesto.ID }))
                                    .Read(read => read.Action("Read_lasCompetenciasDeUnPuesto", "PuestosEvaluacion", new { elPuestoID = puesto.ID }))
                                    .Update(update => update.Action("Update_laCompetenciaDeUnPuesto", "PuestosEvaluacion", new { elPuestoID = puesto.ID }))
                                    .Destroy(destroy => destroy.Action("Destroy_unaCompetenciaDeUnPuesto", "PuestosEvaluacion", new { elPuestoID = puesto.ID }))
                                    .Events(e => e.RequestEnd("afterRequest"))
                                ).Events(e => e.SaveChanges("onSave"))
                            )
                        </div>
                        <div class="tab-pane" id="tab_tipo_evaluadores_@(puesto.ID)">
                            @(Html.Kendo().Grid<PuestoXEvaluadoresDTO>()
                                .Name("TipoEvaluadoresGrid-" + @puesto.ID)
                                .Columns(columns =>
                                    {
                                        //columns.Bound(p => p.Participan);
                                        //columns.Bound(p => p.Participan).ClientTemplate(
                                        //    "<input id=" + puesto.ID + " type='checkbox' value='" + puesto.ID + "' " +
                                        //        "# if (Participan) { #" +
                                        //            "checked='checked'" +
                                        //        "# } #" +
                                        //    " onchange='modificarParticipacion(" + @puesto.ID + ")'/>"
                                        //);
                                        //columns.Bound(p => p.Participan).ClientTemplate(
                                        //    "<input id='#= ID  #' type='checkbox' value='#= ID #'  " +
                                        //        "# if (Participan) { #" +
                                        //            "checked='checked'" +
                                        //        "# } #" +
                                        //    " onchange='modificarParticipacion(" + @puesto.ID + ") style='text-align: center;'/>"
                                        //);                                                                                
                                        columns.Bound(p => p.ClaseEntorno);
                                        columns.Bound(p => p.Cantidad);
                                        columns.Bound(p => p.Peso);
                                    }
                                )
                                .ToolBar(toolbar => { /*toolbar.Create().Text("Registrar");*/ toolbar.Save().SaveText("Guardar cambios").CancelText("Cancelar cambios"); })
                                .Editable(editable => editable
                                    .Mode(GridEditMode.InCell)
                                    .DisplayDeleteConfirmation("Recuerde que debe guardar los cambios para hacer efectiva la eliminación.")
                                    .Window(w => w.Title("Ingrese los datos"))
                                )
                                //.Pageable(e => e.Refresh(true))
                                //.Filterable()
                                //.Sortable()
                                .Scrollable(w => w.Height(330))
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(20)
                                    .Aggregates(a =>
                                    {
                                        a.Add(p => p.Peso).Sum();
                                    })
                                    .Model(model =>
                                    {
                                        model.Id(p => p.ClaseEntorno);
                                    })
                                    //.Create(update => update.Action("Create", "PuestosEvaluacion"))
                                    //.Read(read => read.Action("EditingInline_Read", "PuestosEvaluacion", new { parametro = "parametrovalor" }))
                                    .Read(read => read.Action("EditingInline_Read", "PuestosEvaluacion", new { puestoID = puesto.ID }))
                                    //.Read(read => read.Type(HttpVerbs.Get).Url("/Evaluacion360/PuestosEvaluacion?" + "puesto=" + puesto.ID))
                                    //.Update(update => update.Action("Update", "PuestosEvaluacion"))
                                    .Update(update => update.Action("EditingInline_Update", "PuestosEvaluacion", new { puestoID = puesto.ID }))
                                    //.Update(update => update.url.Action("Update", "PuestosEvaluacion"))
                                    //.Destroy(update => update.Action("Destroy", "PuestosEvaluacion"))
                                    .Events(e => e.RequestEnd("afterRequest"))
                                    .Events(e => e.Change("cambioEnFila"))
                                ).Events(e => e.SaveChanges("onSave"))
                            )
                        </div>
                    </div>
                </div>
            @*}*@
        </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function ready() {
        comboPuestosSelection();
    });

    var last_container = null;
    function comboPuestosSelection() {
        var comboPuestos = $("#ComboPuestos").data("kendoComboBox");
        if (comboPuestos.selectedIndex == -1)
            return;

        var puestoID = comboPuestos.dataItem(comboPuestos.selectedIndex).ID;

        if (last_container != null)
            last_container.hide();
        last_container = $("#container-" + puestoID);
        last_container.show();
    }

    function doNuevoNivel() {
        if (window.confirm("¿Está seguro que desea crear un nuevo nivel para las capacidades?")) {
            $("a#link-crear-nuevo-nivel")[0].click();
        }
    }

    function doEliminarNivel() {
        if (window.confirm("¿Está seguro que desea eliminar el último nivel para las capacidades?")) {
            $("a#link-eliminar-nivel")[0].click();
        }
    }

    function getSumaPeso(data) {
        var sumaPeso = 0;
        for (var i = 0; i < data.length; i++) {
            sumaPeso += data[i].Peso;
        }
        return sumaPeso;
    }

    function onSave(e) {
        var sumaPeso = getSumaPeso(e.sender._data);
        if (sumaPeso != 100) {
            alert("La suma de los pesos no es 100, es " + sumaPeso + ".");
            e.preventDefault();
        }
    }

    function afterRequest(e) {
        if (e.type == 'create')
            e.sender.read();
    }

    function modificarParticipacion(pxe) {

    }

    function cambioEnFila(e) {
        console.log("CambioEnFila");
    }

</script>
>>>>>>> 938caf0a8551ebead498e30d8b81ab21e73eb54a
