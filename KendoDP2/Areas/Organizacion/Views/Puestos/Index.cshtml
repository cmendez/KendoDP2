@using KendoDP2.Areas.Organizacion.Models
@using Kendo.Mvc.UI
@{
    ViewBag.Title = "Puestos";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int pageSize = ViewBag.PageSize;
    IList<AreaDTO> areas = ViewBag.Areas;
    IList<PuestoDTO> puestos = ViewBag.puestos;
    SelectList comboPuestos = new SelectList(puestos, "ID", "Nombre");
    SelectList comboAreas = new SelectList(areas, "ID", "Nombre");
}

@{Html.RenderPartial("Titulo", new KendoDP2.Models.Helpers.PageTitle("Puestos", "Administre los puestos de la empresa"));}

<div class="portlet box green">
    <div class="portlet-title">
        <div class="caption"><i class="icon-reorder"></i>Puestos</div>
        <div class="tools">
            <a href="javascript:;" class="collapse"></a>
        </div>
    </div>
    <div class="portlet-body">
        <div class="row-fluid">
            <div class="span3">
                @(Html.Kendo().TreeView()
                        .Name("treeview")
                        .DataImageUrlField("TreeIcon")
                        .DataTextField("Name")
                        .DataSource(s => s
                            .Read(r => r.Action("PuestosToTree", "Puestos")
                            )
                        )
                        .Events(e => e.Select("onSelectTreeNode").DataBound("onDataBound")
                        )
                    )
            </div>
            <div class="span9">
                @(Html.Kendo().Grid<PuestoDTO>()
                    .Name("grid")
                    .Columns(c =>
                    {
                        c.Bound(p => p.ID);
                        c.Bound(p => p.Nombre);
                        c.ForeignKey(p => p.AreaID, new SelectList(areas, "ID", "Nombre"));
                        c.ForeignKey(p => p.PuestoSuperiorID, new SelectList(puestos, "ID", "Nombre"));
                        c.Template(@<text></text>).Title("Funciones").ClientTemplate(
                        "<a class='k-button' href='" + Url.Action("Index", "Funciones") + "?puestoID=#=ID#'>Funciones</a>");
                        c.Command(cmd =>
                        {
                            cmd.Edit().Text("Editar").UpdateText("Guardar").CancelText("Cancelar");
                            cmd.Destroy().Text("Eliminar");
                        }).Width(200);
                    })
                    .ToolBar(toolbar => { toolbar.Create().Text("Registrar"); toolbar.Custom().Name("Ver todos").Url("javascript:verTodos();"); })
                    .Editable(editable => editable
                        .Mode(GridEditMode.PopUp)
                        .DisplayDeleteConfirmation("¿Está seguro que desea eliminar este registro?")
                        .Window(w => w.Title("Ingrese los datos"))
                    )
                    .Pageable(p => p.Refresh(true))
                    .Filterable()
                    .Sortable()
                    .Selectable()
                    .DataSource(s => s
                        .Ajax()
                        .PageSize(pageSize)
                        .ServerOperation(false)
                        .Model(m => m.Id("ID"))
                        .Create(c => c.Action("Create", "Puestos"))
                        .Read(r => r.Action("Read", "Puestos"))
                        .Update(u => u.Action("Update", "Puestos"))
                        .Destroy(d => d.Action("Destroy", "Puestos"))
                        .Events(e => e.Error("onError"))
                    ).Events(e => e.Edit("onEdit"))
                )
            </div>
        </div>
    </div>
</div>
<style scoped>
    #treeview {
        border: solid 1px #C0C9D0;
    }
</style>
<script>
    
    function onError(e) {
        if (e.errors) {
            var message = "Error:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    $(document).ready(function () {
        $(".k-grid-add").click(verTodos);
    });
    function onEdit(e) {
        console.log(e);
        if (e.type == 'save') {
            console.log(e);
        }
    }
    function onComplete(e) {
        if (e.type == 'create' || e.type == 'destroy' || e.type == 'update') {
            doRefresh();
        }
    }
    $(document).ready(function ready() {
        $('#grid').data('kendoGrid').dataSource.bind('requestEnd', onComplete);
    });
    function onSelectTreeNode(e) {
        var nodo = $('#treeview').data('kendoTreeView').dataItem(e.node);
        var grid = $("#grid").data('kendoGrid');
        grid.dataSource.filter({ field: 'AreaID', operator: 'eq', value: nodo.id });
    }
    function verTodos() {
        var grid = $("#grid").data('kendoGrid');
        grid.dataSource.filter({ field: 'AreaID', operator: 'neq', value: 10000000 });
    }
    function onDataBound() {
        setTimeout("expandNodes()");
    }
    function doRefresh() {
        setTimeout("location.reload(true);", 0);
    }
    function expandNodes() {
        $("#treeview").data("kendoTreeView").expand(".k-item");
    }
</script>
