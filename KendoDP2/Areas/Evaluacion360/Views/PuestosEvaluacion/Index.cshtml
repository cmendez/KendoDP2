@using Kendo.Mvc.UI
@using KendoDP2.Areas.Evaluacion360.Models
@using KendoDP2.Areas.Organizacion.Models

@{
    ViewBag.Title = "Evaluación de puestos de trabajo";
    Layout = "~/Views/Shared/_Layout.cshtml";
    IList<PuestoDTO> puestos = ViewBag.puestos;
    IList<CompetenciaDTO> competencias = ViewBag.competencias;
    IList<NivelCapacidadDTO> niveles = ViewBag.niveles;
}

@{Html.RenderPartial("Titulo", new KendoDP2.Models.Helpers.PageTitle("Evaluación de puestos de trabajo", "Administre las evaluaciones de los puestos de trabajo"));}
<div class="portlet box green">
    <div class="portlet-title">
        <h4><i class="icon-reorder"></i>Puestos de trabajo</h4>
        <div class="tools">
	        <a href="javascript:;" class="collapse"></a>
        </div>
	</div>
    
    <div class="portlet-body">
        <div class="row-fluid">
            <div class="span3 responsive">
                @(Html.Kendo().ComboBox()
                    .Name("ComboPuestos")
                    .Placeholder("Seleccione el puesto...")
                    .DataTextField("Nombre")
                    .DataValueField("ID")
                    .Filter("contains")
                    .BindTo(puestos)
                    .Suggest(true)
                    .HtmlAttributes(new { style = "width:100%" })
                    .Events(e => e.Close("comboPuestosSelection"))
                    .SelectedIndex(0)
                )
            </div>
        </div>
        <div class="row-fluid information-container">
            @foreach(var puesto in puestos){
                <div id="container-@(puesto.ID)" class="hidden">
                    <div class="tabbable tabbable-custom tabs-left">
                    <!-- Only required for left/right tabs -->
                    <ul class="nav nav-tabs tabs-left">
                        <li class="active"><a href="#tab_competencias_@(puesto.ID)" data-toggle="tab">Competencias</a></li>
                        <li class=""><a href="#tab_evaluadores_@(puesto.ID)" data-toggle="tab">Evaluadores</a></li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="tab_competencias_@(puesto.ID)">
                            @(Html.Kendo().Grid<CompetenciaXPuestoDTO>()
                                .Name("CompetenciasGrid-" + @puesto.ID)
                                .Columns(columns =>
                                    {
                                        columns.ForeignKey(p => p.CompetenciaID, new SelectList(competencias, "ID", "Nombre"));
                                        columns.ForeignKey(p => p.NivelID, new SelectList(niveles, "ID", "Nivel"));
                                        columns.Bound(p => p.Peso).ClientFooterTemplate("<strong>Suma:</strong> #=sum#");
                                        columns.Command(command => { command.Destroy().Text("Eliminar"); }).Width(200);
                                    }
                                )
                                .ToolBar(toolbar => { toolbar.Create().Text("Registrar"); toolbar.Save().SaveText("Guardar cambios").CancelText("Cancelar cambios"); })
                                .Editable(editable => editable
                                    .Mode(GridEditMode.InCell)
                                    .DisplayDeleteConfirmation("Recuerde que debe guardar los cambios para hacer efectiva la eliminación.")
                                    .Window(w => w.Title("Ingrese los datos"))
                                )
                                .Pageable(e => e.Refresh(true))
                                .Filterable()
                                .Sortable()
                                .Scrollable(w => w.Height(330))
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(20)
                                    .Aggregates(a =>
                                    {
                                        a.Add(p => p.Peso).Sum();
                                    })
                                    .Model(model =>
                                    {
                                        model.Id(p => p.ID);
                                    })
                                    .Create(update => update.Action("Create", "PuestosEvaluacion"))
                                    .Read(read => read.Action("Read", "Capacidades"))
                                    .Update(update => update.Action("Update", "PuestosEvaluacion"))
                                    .Destroy(update => update.Action("Destroy", "PuestosEvaluacion"))
                                    .Events(e => e.RequestEnd("afterRequest"))
                                ).Events(e => e.SaveChanges("onSave"))
                            )
                        </div>
                    </div>
                </div>
            }
        </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function ready() {
        comboPuestosSelection();
    });

    var last_container = null;
    function comboPuestosSelection() {
        var comboPuestos = $("#ComboPuestos").data("kendoComboBox");
        if (comboPuestos.selectedIndex == -1)
            return;

        var puestoID = comboPuestos.dataItem(comboPuestos.selectedIndex).ID;
        
        if (last_container != null)
            last_container.hide();
        last_container = $("#container-" + puestoID);
        last_container.show();
    }

    function doNuevoNivel() {
        if (window.confirm("¿Está seguro que desea crear un nuevo nivel para las capacidades?")) {
            $("a#link-crear-nuevo-nivel")[0].click();
        }
    }

    function doEliminarNivel() {
        if (window.confirm("¿Está seguro que desea eliminar el último nivel para las capacidades?")) {
            $("a#link-eliminar-nivel")[0].click();
        }
    }

    function getSumaPeso(data) {
        var sumaPeso = 0;
        for (var i = 0; i < data.length; i++) {
            sumaPeso += data[i].Peso;
        }
        return sumaPeso;
    }

    function onSave(e) {
        var sumaPeso = getSumaPeso(e.sender._data);
        if (sumaPeso != 100) {
            alert("La suma de los pesos no es 100, es " + sumaPeso + ".");
            e.preventDefault();
        }
    }

    function afterRequest(e) {
        if (e.type == 'create')
            e.sender.read();
    }
    
</script>