@using Kendo.Mvc.UI
@using KendoDP2.Areas.Evaluacion360.Models
@{
    ViewBag.SidebarSelectedSubOption = ViewBag.Title = "Capacidades";
    Layout = "~/Views/Shared/_Layout.cshtml";
    IList<CompetenciaDTO> competencias = ViewBag.competencias;
    IList<NivelCapacidad> niveles = ViewBag.niveles;
}

@{Html.RenderPartial("Titulo", new KendoDP2.Models.Helpers.PageTitle("Capacidades", "Administre las capacidades de cada competencia"));}
<div class="portlet box green">
    <div class="portlet-title">
        <h4><i class="icon-reorder"></i>Capacidades</h4>
        <div class="tools">
	        <a href="javascript:;" class="collapse"></a>
        </div>
	</div>
    <div class="portlet-body">
        <div class="row-fluid">
            <div class="span3 responsive">
                @(Html.Kendo().ComboBox()
                    .Name("ComboCompetencias")
                    .Placeholder("Seleccione la competencia")
                    .DataTextField("Nombre")
                    .DataValueField("ID")
                    .Filter("contains")
                    .BindTo(competencias)
                    .Suggest(true)
                    .HtmlAttributes(new { style = "width:100%" })
                    .Events(e => e.Select("comboCompetenciasSelection"))
                )
            </div>
            <div class="span9 responsive">
                <a href="#" class="btn"><i class="icon-plus"></i> Agregar nuevo nivel</a>
            </div>
        </div>
        
        <div class="row-fluid information-container">
            @foreach(var competencia in competencias){
                <div id="competencias-container-@competencia.ID" class="hidden">
                    <div class="tabbable tabbable-custom tabs-left">
                    <!-- Only required for left/right tabs -->
                    <ul class="nav nav-tabs tabs-left">
                        @for (int i = 1; i <= niveles.Count; i++)
                        {
                            <li class="@(i == 1 ? "active" : "")"><a href="#tab_@(i)_@(competencia.ID)" data-toggle="tab">Nivel @i</a></li>
                        }
                    </ul>
                    <div class="tab-content">
                        @for (int i = 0; i < niveles.Count; i++)
                        {
                            <div class="tab-pane @(i == 0 ? "active" : "")" id="tab_@(i+1)_@(competencia.ID)">
                                @(Html.Kendo().Grid<CapacidadDTO>()
                                    .Name("CapacidadGrid-" + niveles[i].Nivel + "-" + competencia.ID)
                                    .Columns(columns =>
                                        {
                                            columns.Bound(p => p.Nombre);
                                            columns.Bound(p => p.Peso);
                                            columns.Command(command => {command.Destroy().Text("Eliminar"); }).Width(200);
                                        }
                                    )
                                    .ToolBar(toolbar => { toolbar.Create().Text("Registrar"); toolbar.Save().SaveText("Guardar cambios").CancelText("Cancelar cambios"); })
                                    .Editable(editable => editable
                                        .Mode(GridEditMode.InCell)
                                        .DisplayDeleteConfirmation("Recuerde que debe guardar los cambios para hacer efectiva la eliminación")
                                        .Window(w => w.Title("Ingrese los datos"))
                                    )
                                    .Pageable(paper => paper.Refresh(true))
                                    .Filterable()
                                    .Sortable()
                                    .Scrollable()
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(20)
                                            .Model(model =>
                                            {
                                                model.Id(p => p.ID);
                                                model.Field(p => p.NivelCapacidadID).DefaultValue(niveles[i].ID);
                                                model.Field(p => p.CompetenciaID).DefaultValue(competencia.ID);
                                            })
                                        .Create(update => update.Action("EditingInline_Create", "Capacidades"))
                                        .Read(read => read.Action("EditingInline_Read", "Capacidades", new { nivelID = niveles[i].ID, competenciaID = competencia.ID }))
                                        .Update(update => update.Action("EditingInline_Update", "Capacidades"))
                                        .Destroy(update => update.Action("EditingInline_Destroy", "Capacidades"))
                                    )
                                )
                            </div>
                        }
                        </div>
                    </div>

                </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    var last = -1;
    function comboCompetenciasSelection(e) {
        console.log(19);
        var dataItem = this.dataItem(e.item.index());
        var ID = dataItem.ID;
        if (last != -1)
            $("#competencias-container-" + last).hide();
        $("#competencias-container-" + ID).show();
        last = ID;
    }
</script>